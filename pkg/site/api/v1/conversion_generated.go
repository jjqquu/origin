// +build !ignore_autogenerated_openshift

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	site_api "github.com/openshift/origin/pkg/site/api"
	api "k8s.io/kubernetes/pkg/api"
	api_v1 "k8s.io/kubernetes/pkg/api/v1"
	conversion "k8s.io/kubernetes/pkg/conversion"
)

func init() {
	if err := api.Scheme.AddGeneratedConversionFuncs(
		Convert_v1_Site_To_api_Site,
		Convert_api_Site_To_v1_Site,
		Convert_v1_SiteAddress_To_api_SiteAddress,
		Convert_api_SiteAddress_To_v1_SiteAddress,
		Convert_v1_SiteList_To_api_SiteList,
		Convert_api_SiteList_To_v1_SiteList,
		Convert_v1_SiteSpec_To_api_SiteSpec,
		Convert_api_SiteSpec_To_v1_SiteSpec,
		Convert_v1_SiteStatus_To_api_SiteStatus,
		Convert_api_SiteStatus_To_v1_SiteStatus,
		Convert_v1_StringSource_To_api_StringSource,
		Convert_api_StringSource_To_v1_StringSource,
		Convert_v1_StringSourceSpec_To_api_StringSourceSpec,
		Convert_api_StringSourceSpec_To_v1_StringSourceSpec,
	); err != nil {
		// if one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}

func autoConvert_v1_Site_To_api_Site(in *Site, out *site_api.Site, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api_v1.Convert_v1_ObjectMeta_To_api_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_v1_SiteSpec_To_api_SiteSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_SiteStatus_To_api_SiteStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_Site_To_api_Site(in *Site, out *site_api.Site, s conversion.Scope) error {
	return autoConvert_v1_Site_To_api_Site(in, out, s)
}

func autoConvert_api_Site_To_v1_Site(in *site_api.Site, out *Site, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api_v1.Convert_api_ObjectMeta_To_v1_ObjectMeta(&in.ObjectMeta, &out.ObjectMeta, s); err != nil {
		return err
	}
	if err := Convert_api_SiteSpec_To_v1_SiteSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_api_SiteStatus_To_v1_SiteStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_Site_To_v1_Site(in *site_api.Site, out *Site, s conversion.Scope) error {
	return autoConvert_api_Site_To_v1_Site(in, out, s)
}

func autoConvert_v1_SiteAddress_To_api_SiteAddress(in *SiteAddress, out *site_api.SiteAddress, s conversion.Scope) error {
	out.Url = in.Url
	return nil
}

func Convert_v1_SiteAddress_To_api_SiteAddress(in *SiteAddress, out *site_api.SiteAddress, s conversion.Scope) error {
	return autoConvert_v1_SiteAddress_To_api_SiteAddress(in, out, s)
}

func autoConvert_api_SiteAddress_To_v1_SiteAddress(in *site_api.SiteAddress, out *SiteAddress, s conversion.Scope) error {
	out.Url = in.Url
	return nil
}

func Convert_api_SiteAddress_To_v1_SiteAddress(in *site_api.SiteAddress, out *SiteAddress, s conversion.Scope) error {
	return autoConvert_api_SiteAddress_To_v1_SiteAddress(in, out, s)
}

func autoConvert_v1_SiteList_To_api_SiteList(in *SiteList, out *site_api.SiteList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]site_api.Site, len(*in))
		for i := range *in {
			if err := Convert_v1_Site_To_api_Site(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1_SiteList_To_api_SiteList(in *SiteList, out *site_api.SiteList, s conversion.Scope) error {
	return autoConvert_v1_SiteList_To_api_SiteList(in, out, s)
}

func autoConvert_api_SiteList_To_v1_SiteList(in *site_api.SiteList, out *SiteList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Site, len(*in))
		for i := range *in {
			if err := Convert_api_Site_To_v1_Site(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_api_SiteList_To_v1_SiteList(in *site_api.SiteList, out *SiteList, s conversion.Scope) error {
	return autoConvert_api_SiteList_To_v1_SiteList(in, out, s)
}

func autoConvert_v1_SiteSpec_To_api_SiteSpec(in *SiteSpec, out *site_api.SiteSpec, s conversion.Scope) error {
	out.Type = site_api.SiteType(in.Type)
	if err := Convert_v1_SiteAddress_To_api_SiteAddress(&in.Address, &out.Address, s); err != nil {
		return err
	}
	if err := Convert_v1_StringSource_To_api_StringSource(&in.Credential, &out.Credential, s); err != nil {
		return err
	}
	if in.Finalizers != nil {
		in, out := &in.Finalizers, &out.Finalizers
		*out = make([]api.FinalizerName, len(*in))
		for i := range *in {
			(*out)[i] = api.FinalizerName((*in)[i])
		}
	} else {
		out.Finalizers = nil
	}
	return nil
}

func Convert_v1_SiteSpec_To_api_SiteSpec(in *SiteSpec, out *site_api.SiteSpec, s conversion.Scope) error {
	return autoConvert_v1_SiteSpec_To_api_SiteSpec(in, out, s)
}

func autoConvert_api_SiteSpec_To_v1_SiteSpec(in *site_api.SiteSpec, out *SiteSpec, s conversion.Scope) error {
	out.Type = SiteType(in.Type)
	if err := Convert_api_SiteAddress_To_v1_SiteAddress(&in.Address, &out.Address, s); err != nil {
		return err
	}
	if err := Convert_api_StringSource_To_v1_StringSource(&in.Credential, &out.Credential, s); err != nil {
		return err
	}
	if in.Finalizers != nil {
		in, out := &in.Finalizers, &out.Finalizers
		*out = make([]api_v1.FinalizerName, len(*in))
		for i := range *in {
			(*out)[i] = api_v1.FinalizerName((*in)[i])
		}
	} else {
		out.Finalizers = nil
	}
	return nil
}

func Convert_api_SiteSpec_To_v1_SiteSpec(in *site_api.SiteSpec, out *SiteSpec, s conversion.Scope) error {
	return autoConvert_api_SiteSpec_To_v1_SiteSpec(in, out, s)
}

func autoConvert_v1_SiteStatus_To_api_SiteStatus(in *SiteStatus, out *site_api.SiteStatus, s conversion.Scope) error {
	out.Phase = site_api.SitePhase(in.Phase)
	out.SiteMeta = in.SiteMeta
	out.SiteAgentAddress = in.SiteAgentAddress
	return nil
}

func Convert_v1_SiteStatus_To_api_SiteStatus(in *SiteStatus, out *site_api.SiteStatus, s conversion.Scope) error {
	return autoConvert_v1_SiteStatus_To_api_SiteStatus(in, out, s)
}

func autoConvert_api_SiteStatus_To_v1_SiteStatus(in *site_api.SiteStatus, out *SiteStatus, s conversion.Scope) error {
	out.Phase = SitePhase(in.Phase)
	out.SiteMeta = in.SiteMeta
	out.SiteAgentAddress = in.SiteAgentAddress
	return nil
}

func Convert_api_SiteStatus_To_v1_SiteStatus(in *site_api.SiteStatus, out *SiteStatus, s conversion.Scope) error {
	return autoConvert_api_SiteStatus_To_v1_SiteStatus(in, out, s)
}

func autoConvert_v1_StringSource_To_api_StringSource(in *StringSource, out *site_api.StringSource, s conversion.Scope) error {
	if err := Convert_v1_StringSourceSpec_To_api_StringSourceSpec(&in.StringSourceSpec, &out.StringSourceSpec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_StringSource_To_api_StringSource(in *StringSource, out *site_api.StringSource, s conversion.Scope) error {
	return autoConvert_v1_StringSource_To_api_StringSource(in, out, s)
}

func autoConvert_api_StringSource_To_v1_StringSource(in *site_api.StringSource, out *StringSource, s conversion.Scope) error {
	if err := Convert_api_StringSourceSpec_To_v1_StringSourceSpec(&in.StringSourceSpec, &out.StringSourceSpec, s); err != nil {
		return err
	}
	return nil
}

func Convert_api_StringSource_To_v1_StringSource(in *site_api.StringSource, out *StringSource, s conversion.Scope) error {
	return autoConvert_api_StringSource_To_v1_StringSource(in, out, s)
}

func autoConvert_v1_StringSourceSpec_To_api_StringSourceSpec(in *StringSourceSpec, out *site_api.StringSourceSpec, s conversion.Scope) error {
	out.Value = in.Value
	out.Env = in.Env
	out.File = in.File
	out.KeyFile = in.KeyFile
	return nil
}

func Convert_v1_StringSourceSpec_To_api_StringSourceSpec(in *StringSourceSpec, out *site_api.StringSourceSpec, s conversion.Scope) error {
	return autoConvert_v1_StringSourceSpec_To_api_StringSourceSpec(in, out, s)
}

func autoConvert_api_StringSourceSpec_To_v1_StringSourceSpec(in *site_api.StringSourceSpec, out *StringSourceSpec, s conversion.Scope) error {
	out.Value = in.Value
	out.Env = in.Env
	out.File = in.File
	out.KeyFile = in.KeyFile
	return nil
}

func Convert_api_StringSourceSpec_To_v1_StringSourceSpec(in *site_api.StringSourceSpec, out *StringSourceSpec, s conversion.Scope) error {
	return autoConvert_api_StringSourceSpec_To_v1_StringSourceSpec(in, out, s)
}
